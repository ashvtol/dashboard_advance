{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["newData","CRDItems","SubjectItems","SportItems","console","log","masterData","i","length","push","createMenuItems","App","props","state","sport","subject","crd","index","this","getDataForIndex","value","setState","prev","current","maxLength","newDataTemp","Math","max","temp","Array","map","_","apply","min","className","id","type","data-toggle","onClick","changeSport","href","changeCRD","changeIndex","changeData","style","color","duration","end","maxHR","minHR","width","height","data","crdData","margin","top","right","left","bottom","syncId","strokeDasharray","name","unit","interval","dataKey","resting","x","stroke","label","position","exercise","dot","maxRR","minRR","maxBR","minBR","layout","verticalAlign","align","fill","gender","alcohol","age","weight","smoking","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.414c583e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport masterData from \"./MasterSportDatabase.json\"\nimport LineChart from \"recharts/lib/chart/LineChart\";\nimport CartesianGrid from \"recharts/lib/cartesian/CartesianGrid\";\nimport XAxis from \"recharts/lib/cartesian/XAxis\";\nimport YAxis from \"recharts/lib/cartesian/YAxis\";\nimport Tooltip from \"recharts/lib/component/Tooltip\";\nimport Legend from \"recharts/lib/component/Legend\";\nimport Line from \"recharts/lib/cartesian/Line\";\nimport ReferenceLine from \"recharts/lib/cartesian/ReferenceLine\";\nimport CountUp from \"react-countup\";\nimport './style.css'\nimport Brush from \"recharts/lib/cartesian/Brush\";\nimport AreaChart from \"recharts/lib/chart/AreaChart\";\nimport Area from \"recharts/lib/cartesian/Area\";\n\nlet newData = [];\nlet CRDItems = {};\nlet SubjectItems = {};\nlet SportItems = [];\n\nconsole.log(masterData);\n\nfunction createMenuItems() {\n    for (let i = 0; i < masterData.length; i++) {\n        if (!(masterData[i]['Sport'] + masterData[i]['Subject'] in CRDItems)) {\n            CRDItems[masterData[i]['Sport'] + masterData[i]['Subject']] = [];\n            if (!(masterData[i]['Sport'] in SubjectItems)) {\n                SubjectItems[masterData[i]['Sport']] = [];\n                SubjectItems[masterData[i]['Sport']].push(masterData[i]['Subject']);\n                SportItems.push(masterData[i]['Sport']);\n            } else {\n                SubjectItems[masterData[i]['Sport']].push(masterData[i]['Subject']);\n            }\n            CRDItems[masterData[i]['Sport'] + masterData[i]['Subject']].push(masterData[i]['index']);\n        } else {\n            CRDItems[masterData[i]['Sport'] + masterData[i]['Subject']].push(masterData[i]['index']);\n        }\n    }\n    // SubjectItems = Object.keys(SubjectItems).sort(function(a,b){return SubjectItems[a]-SubjectItems[b]})\n    // CRDItems = Object.keys(CRDItems).sort(function(a,b){return CRDItems[a]-CRDItems[b]})\n}\n\ncreateMenuItems();\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            sport: \"JOG\",\n            subject: \"S5\",\n            crd: \"JOGS5\",\n            newData: null,\n            index: 0,\n        };\n    }\n\n    componentDidMount() {\n        this.getDataForIndex(0);\n    }\n\n    changeSport(value) {\n        // console.log(\"Changed Sport\", value);\n        this.setState((prev, current) => ({\n            sport: value,\n        }), () => {\n            console.log(\"Sport  to :\", this.state.sport);\n            this.setState((prev, current) => ({\n                subject: SubjectItems[this.state.sport][0]\n            }), () => {\n                console.log(\" Subject to :\", this.state.subject);\n            })\n        });\n    }\n\n    changeCRD(value) {\n        console.log(\"Changed Subject\", value);\n        this.setState((prev, current) => ({\n            crd: this.state.sport + value,\n        }), () => {\n            console.log(\"CRD to :\", this.state.crd);\n        });\n    }\n\n    getDataForIndex(index) {\n        console.log(\"index\", index);\n        let newDataTemp = [];\n        let maxLength = null;\n        maxLength = Math.max(masterData[index]['HR'].length, masterData[index]['BR'].length, masterData[index]['RR'].length);\n        console.log(\"maxLength\", maxLength);\n        let temp = [...Array(maxLength)].map((_, i) => ({\n            'x': i + 1,\n            \"HR\": masterData[index][\"HR\"][i],\n            \"BR\": masterData[index][\"BR\"][i],\n            \"RR\": masterData[index][\"RR\"][i]\n        }));\n        newDataTemp.push({\n            'crdData': temp,\n            'sport': masterData[index][\"Sport\"],\n            'subject': masterData[index][\"Subject\"],\n            'gender': masterData[index][\"Gender\"],\n            \"age\": masterData[index][\"Age\"],\n            \"weight\": masterData[index][\"Weight\"],\n            \"height\": masterData[index][\"Height\"],\n            \"smoking\": masterData[index][\"Smoking\"],\n            \"alcohol\": masterData[index][\"Alcohol\"],\n            \"resting\": masterData[index][\"Resting-Elapsed\"],\n            \"recovery\": masterData[index][\"Recovery-Elapsed\"],\n            \"exercise\": masterData[index][\"Exercise-Elapsed\"],\n            \"maxHR\": Math.max.apply(null, masterData[index][\"HR\"]),\n            \"maxBR\": Math.max.apply(null, masterData[index][\"BR\"]),\n            \"maxRR\": Math.max.apply(null, masterData[index][\"RR\"]),\n            \"minHR\": Math.min.apply(null, masterData[index][\"HR\"]),\n            \"minBR\": Math.min.apply(null, masterData[index][\"BR\"]),\n            \"minRR\": Math.min.apply(null, masterData[index][\"RR\"])\n        });\n\n        console.log(newData);\n        // console.log(masterData);\n        this.setState((prev, current) => ({\n            newData: newDataTemp,\n        }), () => {\n            console.log(\"Changed Data:\", this.state.newData);\n        });\n    }\n\n    changeIndex(index) {\n        console.log(\"Index\", index);\n        this.setState((prev, current) => ({\n            index: index,\n        }), () => {\n            console.log(\"CRD to :\", this.state.crd);\n            // this.getDataForIndex(this.state.index);\n        });\n    }\n\n    changeData(){\n        this.getDataForIndex(this.state.index);\n    }\n\n\n    render() {\n        return (\n\n            <div className={\"app\"}>\n                <div className={\"header\"}></div>\n                <div className={\"menu\"}>\n                    <div id={\"menuItems\"}>\n                        <div className=\"dropdown\">\n                            <button className=\"btn btn-primary dropdown-toggle\" type=\"button\"\n                                    data-toggle=\"dropdown\"> Sport\n                                <span className=\"caret\"/></button>\n                            <ul className=\"dropdown-menu\">\n                                {SportItems.map((value, index) => {\n                                    return <li onClick={() => this.changeSport(value)}><a href={\"#\"}>{value}</a></li>\n                                })}\n                            </ul>\n                        </div>\n                    </div>\n                    <div id={\"menuItems\"}>\n                        <div className=\"dropdown\">\n                            <button className=\"btn btn-primary dropdown-toggle\" type=\"button\"\n                                    data-toggle=\"dropdown\"> Subject\n                                <span className=\"caret\"/></button>\n                            <ul className=\"dropdown-menu\">\n                                {SubjectItems[this.state.sport].map((value) => {\n                                    return <li onClick={() => this.changeCRD(value)}><a href={\"#\"}>{value}</a></li>\n                                })}\n                            </ul>\n                        </div>\n                    </div>\n                    <div id={\"menuItems\"}>\n                        <div className=\"dropdown\">\n                            <button className=\"btn btn-primary dropdown-toggle\" type=\"button\"\n                                    data-toggle=\"dropdown\"> CRD\n                                <span className=\"caret\"/></button>\n                            <ul className=\"dropdown-menu\">\n                                {\n                                    CRDItems[this.state.crd].map((value) => {\n                                        return <li onClick={() => this.changeIndex(value)}><a href={\"#\"}>{value + 1} </a>\n                                        </li>\n                                    })}\n                            </ul>\n                        </div>\n                    </div>\n                    <div id={\"menuItems\"}>\n                        <div className=\"dropdown\">\n                            <button className=\"btn btn-primary dropdown-toggle\" type=\"button\"\n                                    data-toggle=\"dropdown\" onClick={() => this.changeData()}> GO\n                            </button>\n                        </div>\n                    </div>\n                </div>\n\n                {this.state.newData === null ? <div>Loading</div> :\n                    <div id={\"g0\"}>\n                        <div id={\"maxCounter\"} style={{color: \"red\"}}>Max HR: <CountUp duration={3}\n                                                                                       end={this.state.newData[0].maxHR}/>\n                        </div>\n                        <div id={\"minCounter\"} style={{color: \"green\"}}>Min HR: <CountUp duration={3}\n                                                                                         end={this.state.newData[0].minHR}/>\n                        </div>\n                        <LineChart\n                            width={1000}\n                            height={250}\n                            data={this.state.newData[0].crdData}\n                            margin={{\n                                top: 20, right: 50, left: 20, bottom: 5,\n                            }}\n                            syncId=\"anyId\"\n                        >\n                            <CartesianGrid strokeDasharray=\"3 3\"/>\n                            <XAxis name=\"t: \" unit='s' interval={1500} dataKey=\"x\"/>\n                            <YAxis/>\n                            <Tooltip/>\n                            <Legend/>\n\n                            {this.state.newData[0].resting && <ReferenceLine\n                                x={this.state.newData[0].resting} stroke=\"red\"\n                                label={{position: 'top', value: 'Exercise'}}/>}\n                            {this.state.newData[0].exercise && <ReferenceLine\n                                x={this.state.newData[0].exercise} stroke=\"red\"\n                                label={{position: 'top', value: 'Recovery'}}/>}\n                            <Line type=\"monotone\" dataKey=\"HR\" stroke=\"#8884d8\" dot={false}/>\n                        </LineChart>\n                    </div>\n                }\n\n                {this.state.newData === null ? <div>Loading</div> :\n                    <div id={\"g1\"}>\n                        <div id={\"maxCounter\"} style={{color: \"red\"}}>Max RR: <CountUp duration={3}\n                                                                                       end={this.state.newData[0].maxRR}/>\n                        </div>\n                        <div id={\"minCounter\"} style={{color: \"green\"}}>Min RR: <CountUp duration={3}\n                                                                                         end={this.state.newData[0].minRR}/>\n                        </div>\n                        <LineChart\n                            width={1000}\n                            height={250}\n                            data={this.state.newData[0].crdData}\n                            margin={{\n                                top: 20, right: 50, left: 20, bottom: 5,\n                            }}\n                            syncId=\"anyId\"\n                        >\n                            <CartesianGrid strokeDasharray=\"3 3\"/>\n                            <XAxis name=\"t: \" unit='s' interval={1500} dataKey=\"x\"/>\n                            <YAxis/>\n                            <Tooltip/>\n                            <Legend/>\n\n                            {this.state.newData[0].resting && <ReferenceLine\n                                x={this.state.newData[0].resting} stroke=\"red\"\n                                label={{position: 'top', value: 'Exercise'}}/>}\n                            {this.state.newData[0].exercise && <ReferenceLine\n                                x={this.state.newData[0].exercise} stroke=\"red\"\n                                label={{position: 'top', value: 'Recovery'}}/>}\n                            <Line type=\"monotone\" dataKey=\"RR\" stroke=\"#8884d8\" dot={false}/>\n                        </LineChart>\n                    </div>\n                }\n\n                {this.state.newData === null ? <div>Loading</div> :\n                    <div id={\"g2\"}>\n                        <div id={\"maxCounter\"} style={{color: \"red\"}}>Max BR: <CountUp duration={3}\n                                                                                       end={this.state.newData[0].maxBR}/>\n                        </div>\n                        <div id={\"minCounter\"} style={{color: \"green\"}}>Min BR: <CountUp duration={3}\n                                                                                         end={this.state.newData[0].minBR}/>\n                        </div>\n                        <LineChart\n                            width={1000}\n                            height={250}\n                            data={this.state.newData[0].crdData}\n                            margin={{\n                                top: 20, right: 50, left: 20, bottom: 5,\n                            }}\n                            syncId=\"anyId\"\n                        >\n                            <CartesianGrid strokeDasharray=\"3 3\"/>\n                            <XAxis name=\"t: \" unit='s' interval={1500} dataKey=\"x\"/>\n                            <YAxis/>\n                            <Tooltip/>\n                            <Legend layout=\"vertical\" verticalAlign=\"bottom\" align=\"center\"/>\n\n                            {this.state.newData[0].resting && <ReferenceLine\n                                x={this.state.newData[0].resting} stroke=\"red\"\n                                label={{position: 'top', value: 'Exercise'}}/>}\n                            {this.state.newData[0].exercise && <ReferenceLine\n                                x={this.state.newData[0].exercise} stroke=\"red\"\n                                label={{position: 'top', value: 'Recovery'}}/>}\n                            <Line type=\"monotone\" dataKey=\"BR\" stroke=\"#8884d8\" dot={false}/>\n                            <Brush\n                                height={20}\n                                left={-100}\n                                stroke=\"black\">\n                                <AreaChart>\n                                    <Area dataKey=\"BR\" fill=\"#8884d8\"/>\n                                </AreaChart>\n                            </Brush>\n                        </LineChart>\n                    </div>\n\n\n                }\n\n                {this.state.newData === null ? <div>Loading</div> :\n                    <div id={\"blocks\"}>\n                        <div className={\"msg-blocks\"}>\n\n                            <div className={\"each-msg-blocks\"} id={\"box1\"}>\n                                <div id={\"box-name\"}>Sport</div>\n                                {this.state.newData[0].sport}</div>\n                            <div className={\"each-msg-blocks\"} id={\"box2\"}>\n                                <div id={\"box-name\"}>Subject</div>\n                                {this.state.newData[0].subject}</div>\n                            <div className={\"each-msg-blocks\"} id={\"box3\"}>\n                                <div id={\"box-name\"}>Gender</div>\n                                {this.state.newData[0].gender === 0 ? \"Female\" : \"Male\"}</div>\n                            <div className={\"each-msg-blocks\"} id={\"box3\"}>\n                                <div id={\"box-name\"}>Alcohol</div>\n                                {this.state.newData[0].alcohol}</div>\n                        </div>\n                        <div className={\"msg-blocks_right\"}>\n                            <div className={\"each-msg-blocks\"} id={\"box4\"}>\n                                <div id={\"box-name\"}>Age</div>\n                                {this.state.newData[0].age}</div>\n                            <div className={\"each-msg-blocks\"} id={\"box5\"}>\n                                <div id={\"box-name\"}>Weight</div>\n                                {this.state.newData[0].weight}</div>\n                            <div className={\"each-msg-blocks\"} id={\"box6\"}>\n                                <div id={\"box-name\"}>Height</div>\n                                {this.state.newData[0].height}</div>\n                            <div className={\"each-msg-blocks\"}>\n                                <div id={[\"box-name\"]} style={{left: \"-70px\"}}>Smoking</div>\n                                {this.state.newData[0].smoking === 0 ? \"False\" : \"True\"}</div>\n                        </div>\n                        <div id={\"crdBox\"}>\n                            <div id={\"box-name-crd\"}>CRD</div>\n                            {this.state.index+1}\n                        </div>\n                    </div>\n                }\n\n\n            </div>\n    );\n    }\n    }\n\n    export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}